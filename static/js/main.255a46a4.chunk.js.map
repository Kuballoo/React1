{"version":3,"sources":["index.js"],"names":["ContainerItem","className","this","props","text","React","Component","Container","state","items","infoEnd","date","id","length","map","i","onInput","autoGrow","bind","spellCheck","onChange","textChange","value","onKeyPress","addOnEnter","onClick","add","e","key","preventDefault","push","setState","addTime","Date","getFullYear","toString","getMonth","padStart","getDate","getHours","getMinutes","getDay","target","style","height","scrollHeight","ReactDOM","render","document","getElementById"],"mappings":"wQAMMA,G,6KAEF,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,YAAf,SACA,uBAAGA,UAAU,YAAYC,KAAKC,MAAMC,W,GALhBC,IAAMC,YAW5BC,E,kDACJ,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXJ,KAAM,GACNK,MAAO,GACPC,QAAS,aACTC,KAAM,IANI,E,qDAWZ,OACE,yBAAKC,GAAG,QACN,wBAAIX,UAAU,UAAd,iCACA,uBAAGW,GAAG,QAAN,WAAqB,2BAAIV,KAAKM,MAAMC,MAAMI,QAA1C,IAAuDX,KAAKM,MAAME,QAAlE,KACCR,KAAKM,MAAMC,MAAMK,KAAI,SAACC,GAAD,OAAO,kBAACf,EAAD,CAAeI,KAAMW,OAClD,yBAAKH,GAAG,UACN,8BAAUI,QAASd,KAAKe,SAASC,KAAKhB,MAAOiB,WAAW,QAAQC,SAAUlB,KAAKmB,WAAWH,KAAKhB,MAAOoB,MAAOpB,KAAKM,MAAMJ,KAAMmB,WAAYrB,KAAKsB,WAAWN,KAAKhB,QAC/J,4BAAQuB,QAASvB,KAAKwB,IAAIR,KAAKhB,OAA/B,a,iCAKGyB,GACI,UAAVA,EAAEC,MACHD,EAAEE,iBACC3B,KAAKM,MAAMJ,OACFF,KAAKM,MAAMC,MACjBqB,KAAK5B,KAAKM,MAAMJ,MACpBF,KAAK6B,SAAS,CAAC3B,KAAM,KACU,IAA5BF,KAAKM,MAAMC,MAAMI,OAAcX,KAAK6B,SAAS,CAACrB,QAAS,YAClDR,KAAKM,MAAMC,MAAMI,OAAS,GAAKX,KAAKM,MAAMC,MAAMI,OAAS,EAAGX,KAAK6B,SAAS,CAACrB,QAAS,YACvFR,KAAK6B,SAAS,CAACrB,QAAS,mB,4BAKjC,GAAGR,KAAKM,MAAMJ,KAAM,CACRF,KAAKM,MAAMC,MACjBqB,KAAK5B,KAAKM,MAAMJ,MACpBF,KAAK6B,SAAS,CAAC3B,KAAM,KAErB,IAAI4B,EAAU,IAAIC,KACJD,EAAQE,cAAcC,YAAcH,EAAQI,WAAa,GAAGD,WAAWE,SAAS,EAAG,KAAQL,EAAQM,UAAWH,WAAWE,SAAS,EAAG,KAAQL,EAAQO,WAAYJ,WAAWE,SAAS,EAAG,KAAQL,EAAQQ,aAAcL,WAAWE,SAAS,EAAG,KAAQL,EAAQS,SAAUN,WAGtP,IAA5BjC,KAAKM,MAAMC,MAAMI,OAAcX,KAAK6B,SAAS,CAACrB,QAAS,YAClDR,KAAKM,MAAMC,MAAMI,OAAS,GAAKX,KAAKM,MAAMC,MAAMI,OAAO,GAAK,EAAGX,KAAK6B,SAAS,CAACrB,QAAS,YAC1FR,KAAK6B,SAAS,CAACrB,QAAS,kB,iCAGtBiB,GACTzB,KAAK6B,SAAS,CAAC3B,KAAMuB,EAAEe,OAAOpB,U,+BAEvBK,GACPA,EAAEe,OAAOC,MAAMC,OAAS,MACxBjB,EAAEe,OAAOC,MAAMC,OAAUjB,EAAEe,OAAOG,aAAc,S,GAzD5BxC,IAAMC,WA6D9BwC,IAASC,OACP,kBAACxC,EAAD,MACAyC,SAASC,eAAe,W","file":"static/js/main.255a46a4.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n\nclass ContainerItem extends React.Component {\n  render() {\n    return(\n      <div className='singleItem'>\n        <div className='itemInfo'>20:14</div>\n        <p className='itemText'>{this.props.text}</p>\n      </div>\n    );\n  }\n}\n\nclass Container extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      text: '',\n      items: [],\n      infoEnd: 'zadań',\n      date: []\n    }\n  }\n  render() {\n    \n    return(\n      <div id='main'>\n        <h1 className='header'>Lista zadań na dziś</h1>\n        <p id='info'>W sumie <b>{this.state.items.length}</b> {this.state.infoEnd}.</p>\n        {this.state.items.map((i) => <ContainerItem text={i}/>)}\n        <div id='inputs'>\n          <textarea onInput={this.autoGrow.bind(this)} spellCheck='false' onChange={this.textChange.bind(this)} value={this.state.text} onKeyPress={this.addOnEnter.bind(this)}></textarea>\n          <button onClick={this.add.bind(this)}>Dodaj</button>\n        </div>\n      </div>\n    );\n  }\n  addOnEnter(e) {\n    if(e.key === 'Enter') {\n      e.preventDefault()\n      if(this.state.text) {\n        let tab = this.state.items\n        tab.push(this.state.text)\n        this.setState({text: ''})\n        if(this.state.items.length === 1) this.setState({infoEnd: 'zadanie'})\n        else if(this.state.items.length > 1 && this.state.items.length < 5) this.setState({infoEnd: 'zadania'})\n        else this.setState({infoEnd: 'zadań'})\n      }\n    }\n  }\n  add() {\n    if(this.state.text) {\n      let tab = this.state.items\n      tab.push(this.state.text)\n      this.setState({text: ''})\n      //zakodowana data dodania\n      let addTime = new Date()\n      let strDate = addTime.getFullYear().toString() + (addTime.getMonth() + 1).toString().padStart(2, '0') + (addTime.getDate()).toString().padStart(2, '0') + (addTime.getHours()).toString().padStart(2, '0') + (addTime.getMinutes()).toString().padStart(2, '0') + (addTime.getDay()).toString()\n\n      //ilosc zadan\n      if(this.state.items.length === 1) this.setState({infoEnd: 'zadanie'})\n      else if(this.state.items.length > 1 && this.state.items.length%10 < 5) this.setState({infoEnd: 'zadania'})\n      else this.setState({infoEnd: 'zadań'})\n    }\n  }\n  textChange(e) {\n    this.setState({text: e.target.value})\n  }\n  autoGrow(e) {\n    e.target.style.height = '1px'\n    e.target.style.height = (e.target.scrollHeight)+'px';\n  }\n}\n\nReactDOM.render(\n  <Container />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}